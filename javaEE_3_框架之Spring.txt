Spirng简介：(本框架DEMO源码见SpringWTestOne项目)
开源轻量级，一站式框架。
如：web层：Spring MVC service层：spirng的IOC dao层：JDBC Template(也可替换为mybatis或者其他框架)
一. IOC （控制反转）
简介:把对象的创建交给spring进行管理,可以降低耦合度
方式:
A.xml配置 B.注解
底层原理:
1.利用dom4j解析xml配置文件.
2.采取工厂设计模式,利用反射创建对象.

* Spring的Bean管理(配置文件)
1.在spirng里面通过配置文件创建对象

2. bean 实例化三种方式实现
第一种:使用类的无参构造创建(常用)
eg:
<bean id="father" class="org.hww.beans.Father"/>
    <!--以无参构造初始化-->
    <bean id="person" class="org.hww.beans.Person">
        <!--有参构造注入属性-->
        <constructor-arg name="userName" value="luHongKai"/>
        <!--set方法注入属性-->
        <property name="age" value="21"/>
        <!--注入对象类型的属性-->
        <property name="father" ref="father"/>
        <!--注入复杂类型的属性-->
        <property name="arrays">
            <array>
                <value>array1</value>
                <value>array2</value>
                <value>array3</value>
            </array>
        </property>
        <property name="lists">
            <list>
                <value>list1</value>
                <value>list2</value>
                <value>list3</value>
            </list>
        </property>
        <property name="maps">
            <map>
                <entry key="mapKey1" value="mapValue1"/>
                <entry key="mapKey2" value="mapValue2"/>
                <entry key="mapKey3" value="mapValue3"/>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="propKey1" >propValue1</prop>
                <prop key="propKey2" >propValue2</prop>
                <prop key="propKey3" >propValue3</prop>
            </props>
        </property>
    </bean>
第二种:使用静态工厂创建对象
第三种:使用实例工厂创建对象

* Bean 标签常用属性
id:属性名称 class:创建对象所在类的全路径
name:功能和id属性一样 
scope:Bean的作用范围 eg: sigleton(默认值) prototype(多例)

* IOC和DI
IOC:控制反转,将对象的创建交给spring配置
DI:依赖注入,在类中设置属性值
区别:DI需要在IOC的基础上去执行.

* Spring的Bean管理(注解)
a.配置文件中开启注解扫描
eg：
	<context:component-scan base-package=" org.hww.ioc.notemethod.beans"/>
b.创建对象的三个注解:
@Component(id值)
//三个衍生注解,功能一样标注类本身的用途清晰
@Service 业务层
@Controller web层
@Repository 持久层

c.属性注入
@Autowired //自动注入,系统根据类名去查找.
@Resource(指定引用的id值) //手动注入

* 配置文件和注解混合使用
创建对象通过配置文件方式
属性注入通过注解方式

spring整合web项目
解决方案(原理):
服务器启动时,底层使用监听器,在ServletContext对象创建时加载配置文件.
方式:
web.xml中,.
<!--指定配置文件路径-->
<context-param>
     <param-name>contextConfigLocation</param-name>
     <param-value>classpath:bean3.xml</param-value>
</context-param>
<!--配置监听器-->
<listener>
     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> 
</listener>

二.AOP
简介:面向切面编程,扩展功能不修改源代码实现(横向抽取代替纵向继续抽取机制)
原理:采取动态代理的方式
A.有接口,采取JDK动态代理方式.(创建和实现类平级的代理对象,和实现类具有相同的功能)
B.无接口,采取CGLIB动态代理方式.(创建和当前类的子类的代理对象,在子类调用父类方法完成增强)

操作术语: 
JoinPoint(连接点):类里面可以被增强的方法.
Pointcut(切入点):实际增强的方法.
表达式配置切入点
execution(<访问修饰符>方法的全路径(<参数><异常>))
eg:
execution(* org.me.person.add(..))
execution(* org.me.person.*(..))
execution(* org.me.person.save*(..))
execution(* *.*(..))

Advice(通知/增强):增强的逻辑,比如扩张某个功能.
前置通知:在方法之前执行
后置通知:反之.
异常通知:在方法出现异常
最终通知:在方法后置之后
环绕通知:在方法之前和方法之后
Aspect(切面):把增强应用到切入点上

*spring的AOP(基于aspectJ操作AOP)
A.xml配置 B.注解
xml配置
eg:
<!--配置对象-->
    <bean id="person3" class="org.hww.aop.configmethod.Person3"/>
    <bean id="father3" class="org.hww.aop.configmethod.Father3"/>
<!--配置AOP-->    
<aop:config>
        <!--配置切入点-->
        <aop:pointcut id="pointcut1" expression="execution(* org.hww.aop.configmethod.Person3.*(..))"/>
        <!--配置切面-->
        <aop:aspect ref="father3">
            <!--配置增强-->
            <aop:before method="before1" pointcut-ref="pointcut1"/>
            <aop:after method="after1" pointcut-ref="pointcut1"/>
            <aop:around method="around1" pointcut-ref="pointcut1"/>
        </aop:aspect>
</aop:config>

注解:
eg:
<!--开启aop自动化代理-->
   <aop:aspectj-autoproxy/>S
@Aspect
public class Father4 {

    @Before(value = "execution(* org.hww.aop.notemethod.beans.Person4.*(..))")
    public void before1() {
        System.out.println("前置增强..............");
    }

}

三. Spring中JdbcTemplate的使用(作用同DBUtils)
第一步.设置数据库信息
第二步.创建JdbcTemplate对象.
增、删、改通过update方法操作数据库.
查询通过query和queryForObject方法,需要自己实现RowMapper接口.
详见源码.

四.Spring中配置
a.配置C3P0数据库连接池
b.service和dao的注入过程示例
详见源码.

五.Spring事务管理API通过
A.xml配置 B.注解
事务管理器API通过PlatformTransactionManager的实现类,
不同的持久化层使用不同的实现类.
xml配置：
配置事务管理器
配置事务增强 <tx:advice/>
配置AOP.
注解:
配置事务管理器
配置开始注解事务扫描
详见源码.