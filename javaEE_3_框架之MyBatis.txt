一.MyBatis:官网学习地址(http://www.mybatis.org/mybatis-3/zh/index.html)
简介概述:
MyBatis是一个优秀的持久层框架，它对JDBC操作数据库的过程进行了封装，使开发者只需要关注SQL本身。
可以使用简单的XML或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。
框架原理:SqlMapConfig.xml-SqlSessionFactory-SqlSession:操作数据库-Executor(内部操作数据库)-(输入参数)MappedStatemend(输出参数)

SqlSession 是线程不安全的,所以一般放在方法体内，当作局部变量使用
Mapper接口开发:
1、mapper.xml文件中的namespace与mapper.java接口的类的全路径相同。
2、mapper.java接口中的方法名和mapper.xml中定义的每个sql的id相同
3、mapper.java接口中的方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型保持一致
4、mapper.java接口中方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型保持一致
eg:
sqlSession.getMapper(Class<T> type);

二.SqlMapConfig.xml配置
常用标签配置
properties //我们可将一些配置信息专门写在对应的properties文件中，然后在SqlMapConfig.xml引用即可
settings  //利用setting配置全局参数从而作用于MyBatis的行为
typeAliases //typeAliases可为Java类型设置一个别名从而减少类完全限定名的冗余
eg:
<typeAliases>
        <typeAlias type="cn.com.Student" alias="Student" /> <!--单个定义-->
        <package name="cn.com.student" /> <!--批量定义:指定包名,自动定义别名，类名即别名-->
</typeAliases>
typeHandlers //MyBatis中通过typeHandlers完成JDBC类型和Java类型的转换
objectFactory
plugins
environments
    environment
        transactionManager
        dataSource
mappers //mappers用于配置SQL映射文件
eg:
<mappers>
    <mapper resource="sqlmap/StudentMapper.xml" /> <!--单个定义-->
    <mapper class="cn.com.StudentMapper"/> <!--必须将xxxmapper.xml和xxxmaper.java置于同一个包下，且文件名必须一致-->
    <package name="cn.com.student" /> <!--批量定义:指定包名,必须将xxxmapper.xml和xxxmaper.java置于同一个包下，且文件名必须一致。-->
</mappers>



XML映射文件:
#{ }表示占位符。如果输入参数是简单类型，参数名可以任意(可以value或其它名称)。
当接收pojo对象值时可通过OGNL读取对象中的属性值；即利用属性.属性.属性…的方式获取对象属性值
${ }表示拼接。如果接收简单类型，${}中只能写成value。容易引起sql注入
当接收pojo对象值时可通过OGNL读取对象中的属性值；即利用属性.属性.属性…的方式获取对象属性值

A.MyBatis输入映射parameterType
parameterType对sql的输入参数进行定义，参数的类型可以是：基本类型、HashMap、pojo。
HashMap：在sql语句中从hashmap中取出对应key所对应的值.
eg:
 HashMap<String, Object> hashMap=new HashMap<String, Object>();
 hashMap.put("id", 7);
 hashMap.put("name", "木");
<select id="findStudentByHashMap" parameterType="hashmap" resultType="cn.com.Student">
        SELECT * FROM student WHERE id=#{id} and name like '%${name}%'
</select>

B.MyBatis输出映射resultType以及resultMap
resultType对sql的输出参数进行定义，参数的类型可以是：基本类型、HashMap、pojo.
HaspMap:将输出的字段名称作为map的key，value为字段值

注意:使用resultType进行输出映射时务必将查询的列名与pojo中的属性名保持一致！如果要求不一致，则可以使用resultMap.
resultMap:
eg:
<!--id:指定列中唯一标识
    column:列名
    property:映射的属性名-->
<resultMap type="cn.com._Student" id="studentResultMap">
    <id column="id" property="_id" /> <!--将字段和POJO属性对应-->
    <result column="name" property="_name" />
    <result column="gender" property="_gender" />
    <result column="birthday" property="_birthday" />
</resultMap>
<select id="_selectStudentByID" parameterType="int" resultMap="studentResultMap">
       SELECT * from student where id=#{value}
</select>

MyBatis的动态Sql
where和if标签
SQL片段：将上边动态SQL抽取出来
一般基于单表来定义，可重用性高，不要包含where
eg:
<sql id="findStudentList_if">
        <if test="studentCustom!=null">
            <if test="studentCustom.gender!=null">
                and gender=#{studentCustom.gender}
            </if>
            <if test="studentCustom.name!=null">
                and name like '%${studentCustom.name}%'
            </if>
        </if>
        <if test="idsList!=null">
            <foreach collection="idsList" item="student_id" open="(" close=")" separator="OR">
            <!--每次遍历需要拼接的串-->
                id=#{student_id}
            </foreach>
        </if>
</sql>
//引用上面的SQL片段
<select id="findStudentList" parameterType="cn.com.StudentQueryVO" resultType="cn.com.StudentCustom">
        SELECT * FROM student
        <where> <!--where标签会自动删除条件中第一个'and'-->
            <include refid="findStudentList_if"></include>  <!--如果引用的id不在本mapper文件中，需要加namespace-->
        </where>
</select>

<foreach>标签:
collection表示pojo中的集合
item表示遍历时集合中每个元素
open表示开始遍历时的串
close表示结束遍历时的串
separator表示每个item的连接符

myBatis和hibernate区别
hibernate:SQL自动生成，修改难度高，过于设计.
应用场景:需求变化不多的项目

二.高级映射
1.一对一查询:
resultMap扩展:association
eg:查询订单及所属的用户信息
<!--association:用于映射关联查询单个对象的信息-->
<resultMap type="cn.com.order" id="orderResultMap">
    <id column="id" property="_id" /> <!--将字段和属性对应-->
    <result column="name" property="_name" />
    <result column="number" property="number" />
    <result column="createtime" property="createtime" />

    <association property="user" javaType="cn.com.user">
        <id column="user_id" property="id" /> <!--映射user类下的属性->
        <result column="username" property="username" />
        <result column="sex" property="sex" />
    </association>
</resultMap>
2.一对多查询:
resultMap扩展:collection
eg:在上面的条件基础上再增加"订单明细"的查询
<resultMap type="cn.com.order" id="orderDetailResultMap" extends="orderResultMap">
    <!--订单信息->
    <!--所属用户信息->
    <!--订单明细信息->
<!--
collection:用于映射关系多条记录的集合对象中
property:将集合映射到哪个属性(这里对应order中的orderdetailsList)
ofType:集合中每个Item的pojo类型
-->
<collection property="orderdetailsList" ofType="cn.com.orderdetail">
        <id column="orderdetail_id" property="id" /> <!--映射orderdetail类下的属性->
        <result column="item_id" property="itemidId" />
        <result column="item_num" property="itemName" />
    </collection>
</resultMap>

3.resultMap总结:
resultType：
作用:将查询结果sql列名和pojo属性名一致性映射到pojo中.
场合:常见一些明细记录.
resultMap:
使用association和collection完成一对一和一对多的高级映射.
作用:
association:将关联查询映射到一个pojo对象中.
collection:将关联查询映射到一个集合对象中.
场合:
association如:查询订单及关联用户信息
collection 如:查询用户模块菜单及子菜单信息

4.延迟加载
配置开启(sqlMapConfig.xml中):
<settings>
	<setting name = "lazyLoadingEnabled" value = "true"/> <!--积极加载开关-->
	<setting name = "aggressiveLazyLoading" value = "false" /> <!--设为消极加载-->
</settings>
association中select指定延迟加载执行的statement的id.
eg:
<resultMap type="cn.com.order" id="orderResultlazyLoaingMap">
    <id column="id" property="_id" /> <!--将字段和属性对应-->
    <result column="name" property="_name" />
    <result column="number" property="number" />
    <result column="createtime" property="createtime" />

    <!--
    select:指定延迟执行的statement的ID
    column：订单信息中关联用户信息的列(外键)
    -->
    <association property="user" javaType="cn.com.user" select= "cn.com.UserMapper.findUserById"  column = "user_id">
        <!-- 延迟加载user信息-->
    </association>
</resultMap>


5.查询缓存
A.一级缓存(默认支持):sqlSession级别缓存，构造sqlSession时有个hashMap存储缓存数据.不同的sqlSession之间的缓存数据区域是互不影响的。
当同一个sqlSession执行插入，修改，删除并commit时，缓存则被清空.
B.二级缓存概念:
mapper级别的缓存，多个sqlSession共享所操作的同一个mapper下的数据。
同理，当某一个sqlSession去执行相同mapper下sql并commit时，则缓存被清空.
b1.配置开启(sqlMapConfig.xml中):
<settings>
	<setting name = "cacheEnabled" value = "true" /> <!--开启二级缓存-->
</settings>
b2.同时在对应mapper.xml文件中，配置开启
<!-- type:指定cache接口的实现类类型,默认cache实现类为PerpetualCache
要和ehcache整合，则配置ehcache的实现类

-->
<cache 
  type = ""/>
sqlSession.close关闭时，才会写入二级缓存.

UseCache的配置：禁用缓存(select标签中使用)
针对每次查询都需最新数据的sql。
FlushCache刷新缓存：默认true

C.二级缓存整合ehCache
redis/memcached/ehCache是一个分布式框架
mybatis提供一个cache接口，去实现用户自己的缓存策略.
导入ehCache-core和mybatis-ehCache两个包,再配置ehCache.xml文件

D.二级缓存应用场景和局限性
场景:访问多且查询结果实时性要求不高.如:数据统计分析。
实现方法:设置flushInterval刷新间隔

局限性:对细粒度数据级别缓存实现不好，需要自己在业务层处理

6.Spirng和MyBatis的整合
环境准备:
mybatis的jar包
spirng的jar包
mybatis和spirng的整合包：mybatis-spring-1.X.X.jar

配置：
在spirng中配置sqlSessionFactory和数据源
eg:
<!--SqlSessionFactory-->
<bean id = "sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name= "configLocation" value = "指定mybatis配置文件路径">
		<property name= "dataSource" ref = "引入配置的dataSource的ID">
</bean>

A.Dao方式的整合
创建mapper.xml和dao(配置dao实现类通过spirng配置注入sqlSessionFactory)
dao实现类继承SqlSessionDaoSupport

B.Mapper方式的整合
创建mapper.xml和mapper.java(配置mapper实现类MapperFactoryBean)
eg:
Spring中的配置:
<!--单独配置mapper接口
MapperFactoryBean:根据mapper接口生成代理对象
-->
<bean id = "XXXMapper" class = "org.mybatis.spring.mapper.MapperFacatoryBean"> 
		<property name= "mapperInterface" value = "指定mapper接口的类全路径">
		<property name= "sqlSessionFactory" ref = "引入配置的sqlSessionFactory的ID">
</bean>

<!--批量配置mapper接口,自动创建代理对象和注入sqlSessionFactory
规范:mapper.java和mapper.xml文件名称保持一致，且在一个目录中
自动扫描出的mapper的bean的id为mapper类名(首字母小写)
-->
<bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<!--指定扫描的包名，如果扫描多个包，每个包中间使用半角逗号隔开-->
		<property name= "basePackage" value = "指定mapper接口所在包名">
		<property name= "sqlSessuibFactoryBeanName" value = "引入配置的sqlSessionFactory的ID">
</bean>




