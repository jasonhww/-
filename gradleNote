1.可选的类型定义
def version = 1

2.assert
assert version == 2

3.括号是可选的
println version

4.字符串
def s1 = 'jason' //代表字符串
def s2 = "jason is man ${version}" //字符串中插入变量
def s3 = '''my name 
is jasonhww ''' //可以进行换行

5.集合api
//list
def buildTools = ['ant','maven']
buildTools << 'gradle'
//map
def buildYears = ['ant':2000,'maven':2004]
buildYears.gradle = 2009 //添加元素
println buildYears.ant //获取value
println buildYears['gradle'] //获取value

6.闭包
//定义
def c1 = { params ->
		code
}

def method1(Closure closure){
	closure("param")
}

method1(c1)//调用

构建脚本：项目(Project)和任务(Task)
自定义任务:
eg：
def createDir = {
	path ->
		File file = new File(path)
		if(!file.exit()){
			file.makedirs()
		}
}
//创建java目录task
task makeJavaDir(){
	def paths = ['src/main/java','src/main/resource','src/test','src/test/java','scr/test/resource']
	doFirst{
		paths.foreach(createDire)
	}
}
//创建web目录task
task makeWebDir(){
	dependson 'makeJavaDir' //依赖创建java目录task
	def paths = ['src/test/webapp']
	doLast{
		paths.foreach(createDir)
	}
}
构建生命周期:初始化-配置-执行.
依赖管理:
jar包三属性:group:name:version
解决冲突：
gradle会默认依赖最高版本的jar,以解决版本冲突

a.修改默认修改策略
configurations.all{
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
b.排除传递性依赖
eg:
androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
})
c.强制指定一个版本
eg:
configurations.all{
        resolutionStrategy {
            force 'com.android.support:appcompat-v7:25.3.1'
        }
}
多项目构建:
eg:
rootProject和subProject
统一的配置放在rootProject下.
xhamster.com


