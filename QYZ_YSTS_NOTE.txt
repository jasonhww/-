YSTS:
典型情况下的生命周期方法:
当activity A跳转到activity B时，会先调用A的onPause,再调用B的onResume方法,最后继续调用A的onStop.
系统之所以这样设计原因
1.比如A在播放音乐，如果没onPause方法去暂停音乐，B创建并可见时音乐还在继续.
2.最后继续调用A的onStop,比如为了防止打开B时发生异常.避免界面显示问题.

异常情况下的生命周期方法:
Off:onSaveInstanceState 一般情况下在onStop之前，onRestoreInstanceState在onStart之后调用
1.有可能被回收的activity,会调用onSaveInstanceState方法保存数据
2.被回收的activity重新打开时,会调用onRestoreInstanceState方法恢复数据
3.activity的配置发生改变.会调用onSaveInstanceState方法保存数据，并且调用onRestoreInstanceState方法恢复数据

IntentFilter的匹配规则
1.	Action的匹配规则:intent中至少包含(匹配)一个IntentFilter中的action(特例除外)
2.	Category的匹配规则:intent中如果有category，那么它必须是IntentFilter已经定义的
(可以没有，因为默认系统会加上default的category)
3.	Data的匹配规则: intent中至少包含(匹配)一个IntentFilter中的data


Volley的原理解析:
源码流程:
Volley.newqueue-requeue.start(创建一个缓存线程和遍历开启4个网络请求线程)
reque.add(request是否可以缓存-缓存线程和网络请求线程)
缓存线程.run(是空或者是过期,放入网络请求队列,否则直接使用缓存)
网络请求线程.run(mNetwork.performRequest(mHttpStack.performRequest)发送请求
-parseNetworkResponse-mResponsePoster.postResponse(回调给主线程))
总结:
add这条请求会先被加入到缓存队列当中，如果发现可以找到相应的缓存结果就直接读取缓存并解析，然后回调给主线程。
如果在缓存中没有找到结果，则将这条请求加入到网络请求队列中，然后处理发送HTTP请求，解析响应结果，写入缓存，并回调主线程。


AsyncTask的原理解析:
1.execute()-初始化mWorker和mFuture。
2.两个线程池,一个SerialExecutor任务队列的排列，一个THREAD_POLL_EXTCUTOR真正执行任务.
3.mworker中call()-postResult(doInBackground(PARAMES))-handler发送消息-回调OnCancel或者OnPostExecute().



项目:
支付模块
推荐模块-根据屏幕参数初始化滚动线scrool_image-onPageScrolled参数设置动画
考勤模块-drawText
云办公模块-初始化两个recyclerView-绑定ItemTouchHelpr-设置拖动和侧滑
环信模块-

